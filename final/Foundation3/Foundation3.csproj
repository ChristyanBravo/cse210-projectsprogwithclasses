
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net7.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>disable</Nullable>
  </PropertyGroup>

</Project>
using System;

class Address
{
    public string Street { get; private set; }
    public string City { get; private set; }
    public string State { get; private set; }
    public string ZipCode { get; private set; }

    public Address(string street, string city, string state, string zipCode)
    {
        Street = street;
        City = city;
        State = state;
        ZipCode = zipCode;
    }

    public string GetFullAddress()
    {
        return $"{Street}, {City}, {State}, {ZipCode}";
    }
}

class Event
{
    public string Title { get; private set; }
    public string Description { get; private set; }
    public DateTime Date { get; private set; }
    public TimeSpan Time { get; private set; }
    public Address Address { get; private set; }

    public Event(string title, string description, DateTime date, TimeSpan time, Address address)
    {
        Title = title;
        Description = description;
        Date = date;
        Time = time;
        Address = address;
    }

    public virtual string GetStandardDetails()
    {
        return $"Event: {Title}\nDescription: {Description}\nDate: {Date.ToShortDateString()}\nTime: {Time}\nAddress: {Address.GetFullAddress()}";
    }

    public virtual string GetFullDetails()
    {
        return GetStandardDetails();
    }

    public virtual string GetShortDescription()
    {
        return $"Event Type: General\nTitle: {Title}\nDate: {Date.ToShortDateString()}";
    }
}

class Lecture : Event
{
    public string Speaker { get; private set; }
    public int Capacity { get; private set; }

    public Lecture(string title, string description, DateTime date, TimeSpan time, Address address, string speaker, int capacity)
        : base(title, description, date, time, address)
    {
        Speaker = speaker;
        Capacity = capacity;
    }

    public override string GetFullDetails()
    {
        return $"Type: Lecture\n{base.GetStandardDetails()}\nSpeaker: {Speaker}\nCapacity: {Capacity} attendees";
    }

    public override string GetShortDescription()
    {
        return $"Event Type: Lecture\nTitle: {Title}\nDate: {Date.ToShortDateString()}";
    }
}

class Reception : Event
{
    public string RsvpEmail { get; private set; }

    public Reception(string title, string description, DateTime date, TimeSpan time, Address address, string rsvpEmail)
        : base(title, description, date, time, address)
    {
        RsvpEmail = rsvpEmail;
    }

    public override string GetFullDetails()
    {
        return $"Type: Reception\n{base.GetStandardDetails()}\nRSVP Email: {RsvpEmail}";
    }

    public override string GetShortDescription()
    {
        return $"Event Type: Reception\nTitle: {Title}\nDate: {Date.ToShortDateString()}";
    }
}

class OutdoorGathering : Event
{
    public string WeatherForecast { get; private set; }

    public OutdoorGathering(string title, string description, DateTime date, TimeSpan time, Address address, string weatherForecast)
        : base(title, description, date, time, address)
    {
        WeatherForecast = weatherForecast;
    }

    public override string GetFullDetails()
    {
        return $"Type: Outdoor Gathering\n{base.GetStandardDetails()}\nWeather Forecast: {WeatherForecast}";
    }

    public override string GetShortDescription()
    {
        return $"Event Type: Outdoor Gathering\nTitle: {Title}\nDate: {Date.ToShortDateString()}";
    }
}

class Program
{
    static void Main(string[] args)
    {
        Address eventAddress = new Address("123 Main St", "Cityville", "CA", "12345");
        DateTime eventDate = new DateTime(2023, 11, 15);
        TimeSpan eventTime = new TimeSpan(18, 30, 0);

        Event generalEvent = new Event("General Event", "Description of the general event.", eventDate, eventTime, eventAddress);
        Lecture lectureEvent = new Lecture("Tech Talk", "Discussion on new technologies.", eventDate, eventTime, eventAddress, "John Smith", 50);
        Reception receptionEvent = new Reception("Networking Night", "Networking event for professionals.", eventDate, eventTime, eventAddress, "rsvp@example.com");
        OutdoorGathering outdoorEvent = new OutdoorGathering("Picnic in the Park", "Casual outdoor gathering.", eventDate, eventTime, eventAddress, "Sunny weather");

        Console.WriteLine("Standard Details:");
        Console.WriteLine(generalEvent.GetStandardDetails());
        Console.WriteLine();

        Console.WriteLine("Full Details:");
        Console.WriteLine(lectureEvent.GetFullDetails());
        Console.WriteLine();

        Console.WriteLine("Short Description:");
        Console.WriteLine(receptionEvent.GetShortDescription());
        Console.WriteLine();

        Console.WriteLine("Full Details:");
        Console.WriteLine(outdoorEvent.GetFullDetails());
    }
}
